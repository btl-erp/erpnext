# Copyright (c) 2013, Frappe Technologies Pvt. Ltd. and contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe
from frappe import _
from frappe.utils import flt, cint

def execute(filters=None):
	columns = get_columns(filters)
	data = get_data(filters)
	return columns, data

#def get_data(filters):
        #values = []
def get_conditions(filters):
	branch = consumption_date = rate_date = jc_date = insurance_date = tc_date = operator_date = le_date = ss_date= ""
	if filters.get("branch"):
		branch += str(filters.branch)
	if filters.get("from_date") and filters.get("to_date"):
		consumption_date = get_dates(filters, "vl", "from_date", "to_date")
		rate_date 	 = get_dates(filters, "pol", "date")
		jc_date 	 = get_dates(filters, "jc", "posting_date", "finish_date")
		insurance_date   = get_dates(filters, "ins", "insured_date")
		operator_date    = get_dates(filters, "op", "start_date", "end_date")
		tc_date		 = get_dates(filters, "tc", "posting_date")		
		le_date		 = get_dates(filters, "le", "encashed_date")
		ss_date		 = get_dates(filters, "ss", "start_date", "ifnull(end_date,curdate())")
		
	return branch, consumption_date, rate_date, jc_date, insurance_date, operator_date, tc_date, le_date, ss_date

def get_dates(filters, module = "", from_date_column = "", to_date_column = ""):
	cond1 = ""
	cond2 = ""

	if from_date_column:
		cond1 = ("{0} between \'" + str(filters.from_date) + "\' and \'" + str(filters.to_date) + "\'").format(from_date_column)
	
	if to_date_column:
		if module in ("op","ss"):
			cond2 = str(" or {0} between \'" + str(filters.from_date) + "\' and \'" + str(filters.to_date) + "\'").format(to_date_column)
		else:
			cond2 = str("and {0} between \'" + str(filters.from_date) + "\' and \'" + str(filters.to_date) + "\'").format(to_date_column)

	return "({0} {1})".format(cond1, cond2)

def get_data(filters):
	branch, consumption_date, rate_date, jc_date, insurance_date, operator_date, tc_date, le_date, ss_date =  get_conditions(filters)
	data = []
	equipments = frappe.db.sql("""
                                select name, branch, equipment_number, equipment_type
                                from `tabEquipment`
				where branch = '{0}'
                        """.format(branch), as_dict=1)

    	for eq in equipments:
		#frappe.msgprint("{0}".format(eq))
                # `tabVehicle Logbook`
        	vl = frappe.db.sql("""
                        	select sum(ifnull(consumption,0)) as consumption
                        	from `tabVehicle Logbook`
                        	where equipment = '{0}'
                        	and   docstatus = 1
				and   {1} 
                    """.format(eq.name,consumption_date), as_dict=1)[0]

                # `tabPOL`
            	pol = frappe.db.sql("""
                            	select avg(rate) as rate
                            	from `tabPOL`
                        	where equipment = '{0}'
                        	and   docstatus = 1
				and   {1}
                    """.format(eq.name, rate_date), as_dict=1)[0]

                # `tabJob Card`
                # owned_by pending
            	jc = frappe.db.sql("""
                            	select sum(ifnull(goods_amount,0)) as goods_amount,
                            		sum(ifnull(services_amount,0)) as services_amount
                            	from `tabJob Card`
                            	where equipment = '{0}'
                            	and   docstatus = 1
				and   {1}
                    """.format(eq.name,jc_date), as_dict=1)[0]

		#Insurance
		ins = frappe.db.sql("""
			 	select sum(ifnull(id.insured_amount,0)) as insurance  
				from `tabInsurance Details` id,	`tabInsurance and Registration` ir 
				where id.parent = ir.name and ir.equipment = '{0}'
				and   ir.docstatus = 1
				and   {1}
			 """.format(eq.name, insurance_date), as_dict=1)[0]


		#v1.append(	#frappe.msgprint(values)
		c_operator = frappe.db.sql("""
				select operator, start_date, end_date  
				from `tabEquipment Operator` eo
				where eo.parent = '{0}' 
				and   eo.docstatus < 2 
				and   {1}
			""".format(eq.name, operator_date), as_dict=1)

		#frappe.msgprint(c_operator)
		travel_claim = 0.0
		e_amount     = 0.0
		gross_pay    = 0.0
		for co in c_operator:
			tc = frappe.db.sql("""
				select sum(ifnull(tc.total_claim_amount,0)) as travel_claim
				from `tabTravel Claim` tc 
				where tc.employee = '{0}'
				and   tc.docstatus = 1
				and   {1}
			""".format(co.operator, tc_date), as_dict=1)[0]


			#Leave Encashment Aomunt
			lea = frappe.db.sql("""
					select sum(ifnull(le.encashment_amount,0)) as e_amount 
					from `tabLeave Encashment` le
					where le.employee = '{0}'
					and   le.docstatus = 1
					and   {1}
				""".format(co.operator, le_date), as_dict=1)[0]

			# `tabSalary Slip`
			#a = frappe.db.get_value("Salary Slip", self.co, "employee_name")
			#total_worked_days = min(end_date, filters.to_date) - max(start_date, filters.from_date)
			'''total_payment_days =frappe.db.sql("""select max(s.end_date)-min(s.start_date) from `tabSlary Slip` s where s.employee = '{0}'
			and s.end_date between \'" + str(filters.from_date) + "\' and \'"+ str(filters.to_date) + "\'
			and s.start_date between \'" + str(filters.from_date) + "\' and \'"+ str(filters.to_date) + "\'""".format(co.current_operator), as_dict=1)'''

			#gross_pay = (sum(gross_pay)/total_payment_days)*total_worked_days)
			ss = frappe.db.sql("""
				     	select sum(ifnull(gross_pay,0)) as gross_pay
				     	from `tabSalary Slip` ss 
					where ss.employee = '{0}'
				     	and ss.docstatus = 1
					and {1}
			       """.format(co.operator, ss_date),  as_dict=1)[0]

			travel_claim += flt(tc.travel_claim)
			e_amount     += flt(lea.e_amount) 
			gross_pay    += flt(ss.gross_pay)
		#frappe.msgprint("{0}".format(tc))
		'''if filters.get("branch"):
			equipments += " and branch = \'" + str(filters.branch) + "\'"
		if filters.get("from_date") and filters.get("to_date"):
			data += " and " + str(filters.uinput) +" between \'" + str(filters.from_date) + "\' and \'"+ str(filters.to_date) + "\'" '''

		data.append((	eq.name,
				eq.equipment_number,
				eq.equipment_type,
				flt(vl.consumption)*flt(pol.rate),
				flt(ins.insurance),
				flt(jc.goods_amount),
				flt(jc.services_amount), 
				gross_pay,
				e_amount,
				travel_claim,
				(flt(vl.consumption)*flt(pol.rate))+flt(ins.insurance)+flt(jc.goods_amount)+
					flt(jc.services_amount)+ travel_claim+e_amount+gross_pay))
	#frappe.msgprint(str(equipments))
    	return tuple(data)
#       return tuple()

def get_columns(filters):
	cols = [
                ("ID") + ":Link/Equipment:120",
		("Registration No") + ":Data:120",
		("Equipment Type") + ":Data:120",
                ("HSD Consumption") + ":Float:120",
                ("Insurance") + ":Float:120",
                ("Goods Amount") + ":Float:120",
                ("Services Amount") + ":Float:120",
		("Gross Pay") + ":Float:120",
		("Leave Encashment") + ":Currency:120",
		("Travel Claim") + ":Currency:120",
		("Total Expense") + ":Currency:120"
	]
	return cols
